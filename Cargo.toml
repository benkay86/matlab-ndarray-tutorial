[package]
name = "matlab-ndarray-tutorial"
description = "Common Matlab idioms in ndarary with Rust."
version = "0.1.0"
authors = ["Benjamin Kay <benjamin@benkay.net>"]
edition = "2018"
license = "MIT OR Apache-2.0"
readme = "README.md"

[dependencies]
# Note that the ndarray ecosystem of crates is "unstable" in the sense that they
# are undergoing rapid development with breaking changes between versions.
# Until we hit version 1.0 you must typically specify the exact minor version
# number for each crate to ensure compatibility (compilation will fail if you
# get it wrong).  ndarray-linalg is typically the "oldest" crate which then
# dictates which version of ndarray and friends you need.
#
# The approx feature is needed for approximate comparison; see `13_compare.rs`.
# The blas feature tells ndarray to optimize certain operations (e.g. matrix
# multiplication) by using a blas backend (see below).
# The rayon feature is needed for parallel iteration (similar to Matlab's
# parfor).
approx = "^0.4"
ndarray = { version = "~0.14", features = ["approx", "blas", "rayon"] }
ndarray-linalg = "~0.13"
ndarray-npy = "~0.7"
ndarray-rand = "~0.13"
num-complex = "~0.3"
num_cpus = "^1"
num-traits = "~0.2"
rand = "~0.8"
rand_distr = "~0.4"
rayon = "^1.5.1"
statrs = "~0.14"

# Linking against a backend
#
# ndarray (optionally) uses blas for optimization, and ndarray-linalg depends on
# blas/lapack for optimized linear solvers.  You should specify a blas/lapack
# library, or "backend," to link against.  There are several options.  Here we
# use the widely-available openblas library.
#
# In addition, you must add the following line to the source file for the binary
# that needs to be linked:
# extern crate blas_src;
#
# If you are writing a library you ideally should *not* specify a blas/lapack
# backend, so that the binary crate which depends on your library will be free
# to select its own backend.  You should depend on ndarray and ndarray-linalg
# using the features above, which are agnostic with regard to the backend.  Note
# that ndarray is configured with the blas feature.  This feature just tells
# ndarray that it will link against blas, not which backend to use.
#
# If, as in this example, you are writing a binary crate, then you must specify
# a blas/lapack backend using the dependencies below.  Otherwise compilation
# will fail at the linking step.
#
# If you are writing a library that has unit tests, specify the backend against
# which to link your unit tests under [dev-dependencies].
#
# For ndarray, use the blas feature for library or binary crates.  Then in your
# binary crate depend on blas-src and lapack-src to specify your blas backend;
# here it is openblas.  Then depend on openblas-src with the cblas feature.
# Your openblas can also depend on the system feature (the default) to link
# against the system's openblas or the static feature to compile your own
# openblas and link against it statically.  Ideally your ndarray should depend
# on the same openblas-src (i.e. system or static) as ndarray-linalg.
#
# For ndarray-linalg, depend on lax with either the openblas-system or
# openblas-static feature.  Then depend on openblas-src with cblas and lapacke
# features, and the appropriate system or static feature.
blas-src = { version = "~0.8", default-features = false, features = ["openblas"] }
lapack-src = { version = "~0.8", default-features = false, features = ["openblas"] }
lax = { version = "~0.1", features = ["openblas-system"] }
openblas-src = { version = "~0.10", features = ["cblas", "lapacke", "system"] }
